"Формы отправки данных. HTML и Django формы"



Цель: как работают POST запросы в Django. Использовать формы для обработки этих запросов.

Задача "Имитация регистрации":

Создайте новое приложение task5 в вашем проекте и шаблон registration_page.html в директории templates/fifth_task.

Шаблон registration_page.html:
Должен содержать форму с полями для ввода и кнопку для её отправки.
Поля для ввода и подписи:
Для логина username с ограничением длины в 30 символов. Подпись: "Введите логин".
Для пароля password с ограничением длины не менее 8 символов. Подпись: "Введите пароль".
Для повтора пароля repeat_password с ограничением длины не менее 8 символов. Подпись: "Повторите пароль".
Для возраста age с ограничением длины в 3 символа. Подпись: "Введите свой возраст".
Создайте форму UserRegister, наследованную от Django формы с аналогичными параметрами, как и в шаблоне.


Представления:
Напишите 2 представления sign_up_by_django и sign_up_by_html.
Оба представления должны обладать следующим функционалом:
Псевдо-список users уже существующих пользователей. (имена пользователей придумайте самостоятельно).
Пустой словарь info, который будет передаваться в context функции render. В случае формы в этом словаре будет и форма.
Получение данных из POST запроса.
Обработка данных из POST запроса:
Если пароль и повторный пароль совпадают + возраст не менее 18 + пользователя ещё нет в users, то возвращается ответ "Приветствуем, <логин пользователя>!"


"Введите логин (поле), Введите пароль (поле), Введите пароль (подтверждающее поле), Введите свой возраст (поле). Кнопка Зарегистрироваться"



В следующих случаях в словарь info добавляются следующие значения под ключом 'error':
1.'Пароли не совпадают', если не совпали введённые пароли.

2.'Вы должны быть старше 18', если возраст меньше 18.

3.'Пользователь уже существует', если username есть в users.

Соответственно необходимо выводить значение переменной error в шаблоне.

Представления должны запускаться по маршрутам: '' и 'django_sign_up' соответственно.
Пример итоговой иерархии директорий:



Решение

https://github.com/sofiamilich/DjangoUrban/blob/master/UrbanDjango/task5/views.py
https://github.com/sofiamilich/DjangoUrban/blob/master/UrbanDjango/task5/forms.py
https://github.com/sofiamilich/DjangoUrban/tree/master/UrbanDjango/templates/fifth_task
https://github.com/sofiamilich/DjangoUrban/blob/master/UrbanDjango/UrbanDjango/urls.py
https://github.com/sofiamilich/DjangoUrban/blob/master/UrbanDjango/UrbanDjango/settings.py